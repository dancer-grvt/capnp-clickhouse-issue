// Code generated by capnpc-go. DO NOT EDIT.

package sampleSchema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type TestStruct capnp.Struct

// TestStruct_TypeID is the unique identifier for the type TestStruct.
const TestStruct_TypeID = 0xec440b5c75fb4801

func NewTestStruct(s *capnp.Segment) (TestStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TestStruct(st), err
}

func NewRootTestStruct(s *capnp.Segment) (TestStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TestStruct(st), err
}

func ReadRootTestStruct(msg *capnp.Message) (TestStruct, error) {
	root, err := msg.Root()
	return TestStruct(root.Struct()), err
}

func (s TestStruct) String() string {
	str, _ := text.Marshal(0xec440b5c75fb4801, capnp.Struct(s))
	return str
}

func (s TestStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestStruct) DecodeFromPtr(p capnp.Ptr) TestStruct {
	return TestStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TestStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestStruct) TitleField() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TestStruct) HasTitleField() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TestStruct) TitleFieldBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TestStruct) SetTitleField(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TestStruct) InnerTuple() (InnerTuple, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return InnerTuple(p.Struct()), err
}

func (s TestStruct) HasInnerTuple() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TestStruct) SetInnerTuple(v InnerTuple) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewInnerTuple sets the innerTuple field to a newly
// allocated InnerTuple struct, preferring placement in s's segment.
func (s TestStruct) NewInnerTuple() (InnerTuple, error) {
	ss, err := NewInnerTuple(capnp.Struct(s).Segment())
	if err != nil {
		return InnerTuple{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TestStruct_List is a list of TestStruct.
type TestStruct_List = capnp.StructList[TestStruct]

// NewTestStruct creates a new list of TestStruct.
func NewTestStruct_List(s *capnp.Segment, sz int32) (TestStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TestStruct](l), err
}

// TestStruct_Future is a wrapper for a TestStruct promised by a client call.
type TestStruct_Future struct{ *capnp.Future }

func (f TestStruct_Future) Struct() (TestStruct, error) {
	p, err := f.Future.Ptr()
	return TestStruct(p.Struct()), err
}
func (p TestStruct_Future) InnerTuple() InnerTuple_Future {
	return InnerTuple_Future{Future: p.Future.Field(1, nil)}
}

type InnerTuple capnp.Struct

// InnerTuple_TypeID is the unique identifier for the type InnerTuple.
const InnerTuple_TypeID = 0xf4ad4e708c5e6974

func NewInnerTuple(s *capnp.Segment) (InnerTuple, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return InnerTuple(st), err
}

func NewRootInnerTuple(s *capnp.Segment) (InnerTuple, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return InnerTuple(st), err
}

func ReadRootInnerTuple(msg *capnp.Message) (InnerTuple, error) {
	root, err := msg.Root()
	return InnerTuple(root.Struct()), err
}

func (s InnerTuple) String() string {
	str, _ := text.Marshal(0xf4ad4e708c5e6974, capnp.Struct(s))
	return str
}

func (s InnerTuple) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InnerTuple) DecodeFromPtr(p capnp.Ptr) InnerTuple {
	return InnerTuple(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InnerTuple) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InnerTuple) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InnerTuple) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InnerTuple) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InnerTuple) NormalField() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InnerTuple) HasNormalField() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InnerTuple) NormalFieldBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InnerTuple) SetNormalField(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s InnerTuple) NormalField2() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InnerTuple) SetNormalField2(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InnerTuple) SpecialField() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s InnerTuple) HasSpecialField() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InnerTuple) SetSpecialField(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// InnerTuple_List is a list of InnerTuple.
type InnerTuple_List = capnp.StructList[InnerTuple]

// NewInnerTuple creates a new list of InnerTuple.
func NewInnerTuple_List(s *capnp.Segment, sz int32) (InnerTuple_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[InnerTuple](l), err
}

// InnerTuple_Future is a wrapper for a InnerTuple promised by a client call.
type InnerTuple_Future struct{ *capnp.Future }

func (f InnerTuple_Future) Struct() (InnerTuple, error) {
	p, err := f.Future.Ptr()
	return InnerTuple(p.Struct()), err
}

const schema_b44039789e9fa5cd = "x\xda\x84\xce\xbbJ+Q\x18\xc5\xf1\xb5\xbe=99" +
	"p\x12\x92!\x81c\x95Z\x0b/Q\x1b\xc5\"E\x0c" +
	"\x1aT\xb2I\x04\x11\x11\xc7\xc9\x06Gv\xc6!\x99A" +
	"}\x07\x9fA+\xc1Fl|\x0d\xdf\xc4F\xb0\xb3\x18" +
	"\x19/Qll\xff\xac\x05\xbf\xf2M\xc3\xa9\x17\xff\x0b" +
	"DO\xe4\xfe\xa4\\{I\xf6\xfe5\x1f\xe1\xd6\x98>" +
	"\\_]\x9e-5\xee\x91\x93<P\x7fj\xb3\x92c" +
	"\x1e\xa8\x90\xa7`\x1a\x07\xfb\x17\xd1\xd6\xed3t\x8d?" +
	"\xc7\x0b\x86mV\xce\xdf\xd6\x09\xef0\x9d\x8e\xbcAd" +
	"M\xd7w\x8e\xcc\xc0\x9b\x8d\xcd(\xee\xc6\xc3\xc4\x8fg" +
	"|/\x0a\xa3\xe5\xde8\x00\x1dR\xffU\x0e\xe0\x10p" +
	"\xa7v\x01=\xa9\xa8\x17\x85.Ye\x16\xebY\x9cS" +
	"\xd4+\x92AbkZ\x81\x81\xb2}\x16 ,\x80i" +
	"\x10\x86f\xd8K\"(kX\xfe\xc2\x82,\x83\xbfq" +
	"\xd6?\xde\xd6\xbcs\x0ac\xce\xea!\xa0\x9b\x8a\xba#" +
	"\xfc\xd4l\x1e\x03zCQ\xef\x08]a\x95\x02\xb8\xdb" +
	"Y\xec)\xea\x03a\x1a\x9e\x0c\x07\x9em\x05\xc8\x9bo" +
	"\xc6q-\x19\xdb\x9f\xa7\x03\xa1\x93\xd9\"\xe3\x07\x9em" +
	"\xa1\x14d\xeb\"\x84E\xf05\x00\x00\xff\xff\x1e\xc6i" +
	"|"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b44039789e9fa5cd,
		Nodes: []uint64{
			0xec440b5c75fb4801,
			0xf4ad4e708c5e6974,
		},
		Compressed: true,
	})
}
